name: CI

on:
  pull_request:
  push:
    branches:
      - 'master'
      - 'starling-v*-release'
      - 'v*-release'
    tags:
      - 'v*'
      - 'starling-v*'

jobs:

  c:
    strategy:
      matrix:
        include:
          - {os: ubuntu-18.04, cc: "gcc-6", cxx: "g++-6"}
          - {os: macos-10.15, cc: "clang", cxx: "clang++"}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: Install gcc-6
        if: matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt-get update && \
          sudo apt-get install build-essential software-properties-common -y && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update && \
          sudo apt-get install gcc-6 g++-6 -y && \
          gcc -v
      - name: Run build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          TESTENV: ${{ matrix.cc }}
        run: |
          bash ./ci-build.sh

  haskell:
    strategy:
      matrix:
        target:
          - {os: ubuntu-18.04, prefix: "ubuntu"}
          - {os: macos-10.15, prefix: "macos"}
          - {os: windows-2019, prefix: "windows"}
        is_release:
          - ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        exclude:
          - {is_release: false, target: {os: macos-10.15, prefix: "macos"}}
          - {is_release: false, target: {os: windows-2019, prefix: "windows"}}
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Pull tags
        run: git fetch --tags --prune --unshallow --force
      - name: Run build
        env:
          TESTENV: stack-${{ matrix.target.prefix }}
        shell: bash
        run: |
          bash ./ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.prefix }}-haskell-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  release:
    runs-on: ubuntu-latest
    needs: [haskell, c]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-haskell-artifacts
      - run: |
          echo "RELEASE_ARCHIVE_LINUX=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Download macOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-haskell-artifacts
      - run: |
          echo "RELEASE_ARCHIVE_MACOS=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Download Windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-haskell-artifacts
      - run: |
          echo "RELEASE_ARCHIVE_WINDOWS=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.RELEASE_ARCHIVE_LINUX }}
            ${{ env.RELEASE_ARCHIVE_MACOS }}
            ${{ env.RELEASE_ARCHIVE_WINDOWS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
